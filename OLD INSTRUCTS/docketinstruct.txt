Next Implementation Step: Case Docket Management System
Overview
Now that we've implemented the Case and Client Management systems, we should build the Case Docket Management System. This component will handle court documents, filings, and procedural tracking for cases - particularly important for class actions and other litigation matters.
This component should be placed in Phase 3: Core Application Features, after the Client and Case Management section.
Case Docket Management System Plan
Deliverables

Court Model: For tracking different courts (federal, state, local)
Docket Model: Core entity for case docket information
Party Model: For tracking litigants and participants in a case
Attorney Model: For tracking legal representation
Docket Entry Model: For chronological tracking of filings and proceedings
Case Integration: Connect dockets with the existing Case model
Admin Interfaces: For managing docket information
Frontend Views: For viewing and navigating docket entries

Implementation Details
1. Create the Docket App
bashCopycd daedlaus
python manage.py startapp docket
Add the app to INSTALLED_APPS in daedlaus/settings/base.py.
2. Core Models
pythonCopy# docket/models.py

from django.db import models
from django.conf import settings
from django.urls import reverse
from cases.models import Case

class Court(models.Model):
    """
    Model representing a court (federal, state, or local)
    """
    COURT_LEVELS = [
        ('federal', 'Federal'),
        ('state', 'State'),
        ('local', 'Local'),
        ('administrative', 'Administrative'),
    ]
    
    name = models.CharField(max_length=255)
    level = models.CharField(max_length=20, choices=COURT_LEVELS)
    jurisdiction = models.CharField(max_length=255)
    
    # Location information
    address = models.TextField(blank=True)
    city = models.CharField(max_length=100, blank=True)
    state = models.CharField(max_length=100, blank=True)
    postal_code = models.CharField(max_length=20, blank=True)
    
    # Contact information
    website = models.URLField(blank=True)
    phone = models.CharField(max_length=20, blank=True)
    
    # Electronic filing information
    e_filing_available = models.BooleanField(default=False)
    e_filing_url = models.URLField(blank=True)
    
    # System codes for integration
    pacer_code = models.CharField(max_length=20, blank=True, verbose_name="PACER Court Code")
    
    # Meta
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Court"
        verbose_name_plural = "Courts"
        ordering = ['name']
    
    def __str__(self):
        return f"{self.name} ({self.get_level_display()})"

class Docket(models.Model):
    """
    Case docket information - can be linked to our internal Case model
    """
    # Link to our internal case
    case = models.OneToOneField(
        Case, 
        on_delete=models.CASCADE, 
        related_name='docket',
        null=True,
        blank=True
    )
    
    # Court information
    court = models.ForeignKey(
        Court,
        on_delete=models.PROTECT,
        related_name='dockets'
    )
    
    # Docket identifiers
    docket_number = models.CharField(max_length=100)
    case_name = models.CharField(max_length=255)
    
    # Dates
    date_filed = models.DateField()
    date_terminated = models.DateField(null=True, blank=True)
    date_converted = models.DateField(null=True, blank=True, help_text="Date when case was converted to another type")
    date_discharged = models.DateField(null=True, blank=True)
    
    # Assignment
    assigned_to = models.CharField(max_length=255, blank=True, help_text="Judge or official assigned to the case")
    referred_to = models.CharField(max_length=255, blank=True, help_text="Additional referral information")
    
    # Case details
    cause = models.CharField(max_length=255, blank=True)
    nature_of_suit = models.CharField(max_length=255, blank=True)
    jury_demand = models.CharField(max_length=100, blank=True)
    demand = models.TextField(blank=True)
    jurisdiction = models.CharField(max_length=255, blank=True)
    mdl_status = models.CharField(max_length=100, blank=True, verbose_name="MDL Status")
    
    # Federal-specific fields
    federal_office_code = models.CharField(max_length=20, blank=True, null=True, verbose_name="Federal DN Office Code")
    federal_case_type = models.CharField(max_length=100, blank=True, null=True, verbose_name="Federal DN Case Type")
    federal_judge_initials_assigned = models.CharField(max_length=10, blank=True, verbose_name="Federal Judge Initials (Assigned)")
    federal_judge_initials_referred = models.CharField(max_length=10, blank=True, null=True, verbose_name="Federal Judge Initials (Referred)")
    federal_defendant_number = models.CharField(max_length=100, blank=True, null=True, verbose_name="Federal Defendant Number")
    
    # Meta
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.PROTECT,
        related_name='created_dockets'
    )
    updated_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name='updated_dockets'
    )
    
    class Meta:
        verbose_name = "Docket"
        verbose_name_plural = "Dockets"
        ordering = ['-date_filed']
        unique_together = [['court', 'docket_number']]
    
    def __str__(self):
        return f"{self.case_name} ({self.docket_number})"
    
    def get_absolute_url(self):
        return reverse('docket:docket_detail', args=[self.id])
    
    @property
    def is_active(self):
        """Check if the case is still active (not terminated)"""
        return self.date_terminated is None

class Party(models.Model):
    """
    Party involved in a case (plaintiff, defendant, intervenor, etc.)
    """
    PARTY_TYPES = [
        ('plaintiff', 'Plaintiff'),
        ('defendant', 'Defendant'),
        ('debtor', 'Debtor'),
        ('creditor', 'Creditor'),
        ('trustee', 'Trustee'),
        ('us_trustee', 'U.S. Trustee'),
        ('third_party', 'Third Party'),
        ('intervenor', 'Intervenor'),
        ('petitioner', 'Petitioner'),
        ('respondent', 'Respondent'),
        ('claimant', 'Claimant'),
        ('appellant', 'Appellant'),
        ('appellee', 'Appellee'),
        ('interested_party', 'Interested Party'),
        ('mediator', 'Mediator'),
        ('other', 'Other'),
    ]
    
    docket = models.ForeignKey(
        Docket,
        on_delete=models.CASCADE,
        related_name='parties'
    )
    type = models.CharField(max_length=20, choices=PARTY_TYPES)
    name = models.CharField(max_length=255)
    extra_info = models.TextField(blank=True, help_text="Additional details such as address or contact information")
    date_terminated = models.DateField(null=True, blank=True)
    
    # Optional link to our internal client
    client = models.ForeignKey(
        'clients.Client',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='docket_appearances'
    )
    
    # Meta
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Party"
        verbose_name_plural = "Parties"
        ordering = ['type', 'name']
    
    def __str__(self):
        return f"{self.name} ({self.get_type_display()})"

class Attorney(models.Model):
    """
    Attorney representing a party in a case
    """
    party = models.ForeignKey(
        Party,
        on_delete=models.CASCADE,
        related_name='attorneys'
    )
    name = models.CharField(max_length=255)
    roles = models.CharField(max_length=255, blank=True, help_text="Comma-separated roles")
    contact = models.TextField(blank=True, help_text="Contact information including address, phone, email, etc.")
    
    # Optional link to our internal user
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='docket_appearances'
    )
    
    # Meta
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Attorney"
        verbose_name_plural = "Attorneys"
        ordering = ['name']
    
    def __str__(self):
        return f"{self.name} for {self.party}"
    
    def get_roles_list(self):
        """Return roles as a list"""
        if not self.roles:
            return []
        return [role.strip() for role in self.roles.split(',')]

class DocketEntry(models.Model):
    """
    Entry in a case docket (filing, order, hearing, etc.)
    """
    docket = models.ForeignKey(
        Docket,
        on_delete=models.CASCADE,
        related_name='entries'
    )
    
    # Entry details
    date_filed = models.DateField()
    date_entered = models.DateField(help_text="Date when the entry was officially entered into the system")
    document_number = models.CharField(max_length=50, blank=True, help_text="Sequential or identifying number for the document")
    pacer_doc_id = models.CharField(max_length=100, blank=True, verbose_name="PACER Document ID")
    pacer_seq_no = models.CharField(max_length=50, blank=True, null=True, verbose_name="PACER Sequence Number")
    description = models.TextField(help_text="Detailed description of the docket entry")
    
    # Document link (if available)
    document = models.ForeignKey(
        'documents.Document',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='docket_entries'
    )
    
    # Meta
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.PROTECT,
        related_name='created_entries'
    )
    updated_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name='updated_entries'
    )
    
    class Meta:
        verbose_name = "Docket Entry"
        verbose_name_plural = "Docket Entries"
        ordering = ['-date_filed', '-date_entered']
    
    def __str__(self):
        doc_num = f"#{self.document_number}" if self.document_number else ""
        return f"{self.date_filed} {doc_num}: {self.description[:50]}..."
3. Admin Interface
pythonCopy# docket/admin.py

from django.contrib import admin
from django.utils.translation import gettext_lazy as _
from .models import Court, Docket, Party, Attorney, DocketEntry

@admin.register(Court)
class CourtAdmin(admin.ModelAdmin):
    list_display = ('name', 'level', 'jurisdiction', 'city', 'state')
    list_filter = ('level', 'state', 'e_filing_available')
    search_fields = ('name', 'jurisdiction', 'city', 'state')
    fieldsets = (
        (None, {
            'fields': ('name', 'level', 'jurisdiction')
        }),
        (_('Location'), {
            'fields': ('address', 'city', 'state', 'postal_code')
        }),
        (_('Contact Information'), {
            'fields': ('website', 'phone')
        }),
        (_('Electronic Filing'), {
            'fields': ('e_filing_available', 'e_filing_url')
        }),
        (_('System Codes'), {
            'fields': ('pacer_code',)
        }),
    )

class PartyInline(admin.TabularInline):
    model = Party
    extra = 1
    fields = ('type', 'name', 'client', 'extra_info', 'date_terminated')
    autocomplete_fields = ('client',)

class DocketEntryInline(admin.TabularInline):
    model = DocketEntry
    extra = 1
    fields = ('date_filed', 'document_number', 'description', 'document')
    autocomplete_fields = ('document',)
    show_change_link = True

@admin.register(Docket)
class DocketAdmin(admin.ModelAdmin):
    list_display = ('case_name', 'docket_number', 'court', 'date_filed', 'assigned_to', 'is_active')
    list_filter = ('court', 'date_filed', 'date_terminated')
    search_fields = ('case_name', 'docket_number', 'assigned_to')
    
    fieldsets = (
        (None, {
            'fields': ('case', 'court', 'docket_number', 'case_name')
        }),
        (_('Dates'), {
            'fields': ('date_filed', 'date_terminated', 'date_converted', 'date_discharged')
        }),
        (_('Assignment'), {
            'fields': ('assigned_to', 'referred_to')
        }),
        (_('Case Details'), {
            'fields': ('cause', 'nature_of_suit', 'jury_demand', 'demand', 'jurisdiction', 'mdl_status')
        }),
        (_('Federal Information'), {
            'fields': ('federal_office_code', 'federal_case_type', 'federal_judge_initials_assigned', 
                      'federal_judge_initials_referred', 'federal_defendant_number'),
            'classes': ('collapse',),
        }),
    )
    
    inlines = [PartyInline, DocketEntryInline]
    autocomplete_fields = ('case',)
    
    def save_model(self, request, obj, form, change):
        if not change:  # New object
            obj.created_by = request.user
        obj.updated_by = request.user
        super().save_model(request, obj, form, change)
    
    def save_formset(self, request, form, formset, change):
        instances = formset.save(commit=False)
        for instance in instances:
            if isinstance(instance, DocketEntry):
                if not instance.created_by_id:
                    instance.created_by = request.user
                instance.updated_by = request.user
            instance.save()
        formset.save_m2m()

class AttorneyInline(admin.TabularInline):
    model = Attorney
    extra = 1
    fields = ('name', 'roles', 'contact', 'user')
    autocomplete_fields = ('user',)

@admin.register(Party)
class PartyAdmin(admin.ModelAdmin):
    list_display = ('name', 'type', 'docket', 'client')
    list_filter = ('type', 'docket__court')
    search_fields = ('name', 'docket__case_name', 'docket__docket_number')
    autocomplete_fields = ('docket', 'client')
    inlines = [AttorneyInline]

@admin.register(Attorney)
class AttorneyAdmin(admin.ModelAdmin):
    list_display = ('name', 'party', 'user')
    list_filter = ('party__docket__court',)
    search_fields = ('name', 'contact', 'party__name')
    autocomplete_fields = ('party', 'user')

@admin.register(DocketEntry)
class DocketEntryAdmin(admin.ModelAdmin):
    list_display = ('docket', 'date_filed', 'document_number', 'description_short')
    list_filter = ('date_filed', 'docket__court')
    search_fields = ('description', 'document_number', 'docket__case_name', 'docket__docket_number')
    autocomplete_fields = ('docket', 'document')
    
    fieldsets = (
        (None, {
            'fields': ('docket', 'date_filed', 'date_entered')
        }),
        (_('Document Information'), {
            'fields': ('document_number', 'pacer_doc_id', 'pacer_seq_no', 'description')
        }),
        (_('Document Link'), {
            'fields': ('document',)
        }),
    )
    
    def description_short(self, obj):
        return obj.description[:50] + ('...' if len(obj.description) > 50 else '')
    description_short.short_description = "Description"
    
    def save_model(self, request, obj, form, change):
        if not change:  # New object
            obj.created_by = request.user
        obj.updated_by = request.user
        super().save_model(request, obj, form, change)
4. URLs and Views
pythonCopy# docket/urls.py

from django.urls import path
from . import views

app_name = 'docket'

urlpatterns = [
    path('courts/', views.court_list, name='court_list'),
    path('courts/<int:court_id>/', views.court_detail, name='court_detail'),
    path('dockets/', views.docket_list, name='docket_list'),
    path('dockets/<int:docket_id>/', views.docket_detail, name='docket_detail'),
    path('dockets/<int:docket_id>/entries/', views.docket_entries, name='docket_entries'),
    path('cases/<uuid:case_uuid>/docket/', views.case_docket, name='case_docket'),
    path('cases/<uuid:case_uuid>/docket/create/', views.create_case_docket, name='create_case_docket'),
    path('dockets/<int:docket_id>/add-entry/', views.add_docket_entry, name='add_docket_entry'),
    path('dockets/<int:docket_id>/add-party/', views.add_party, name='add_party'),
    path('parties/<int:party_id>/add-attorney/', views.add_attorney, name='add_attorney'),
]
pythonCopy# docket/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required, permission_required
from django.contrib import messages
from django.utils.translation import gettext as _
from django.db import transaction

from .models import Court, Docket, Party, Attorney, DocketEntry
from cases.models import Case

@login_required
def court_list(request):
    """List all courts"""
    level = request.GET.get('level')
    state = request.GET.get('state')
    
    courts = Court.objects.all()
    
    if level:
        courts = courts.filter(level=level)
    if state:
        courts = courts.filter(state=state)
    
    # Get unique states for filter
    states = Court.objects.values_list('state', flat=True).distinct().order_by('state')
    
    return render(request, 'docket/court_list.html', {
        'courts': courts,
        'states': states,
        'level': level,
        'state': state
    })

@login_required
def court_detail(request, court_id):
    """Show details for a specific court"""
    court = get_object_or_404(Court, id=court_id)
    dockets = court.dockets.all()[:20]  # Limit to 20 most recent
    
    return render(request, 'docket/court_detail.html', {
        'court': court,
        'dockets': dockets,
    })

@login_required
def docket_list(request):
    """List all dockets"""
    court_id = request.GET.get('court')
    active_only = request.GET.get('active') == 'true'
    
    dockets = Docket.objects.all()
    
    if court_id:
        dockets = dockets.filter(court_id=court_id)
    if active_only:
        dockets = dockets.filter(date_terminated__isnull=True)
    
    # Get all courts for filter
    courts = Court.objects.all().order_by('name')
    
    return render(request, 'docket/docket_list.html', {
        'dockets': dockets,
        'courts': courts,
        'selected_court': court_id,
        'active_only': active_only
    })

@login_required
def docket_detail(request, docket_id):
    """Show details for a specific docket"""
    docket = get_object_or_404(Docket, id=docket_id)
    parties = docket.parties.all()
    entries = docket.entries.all()[:50]  # Limit to 50 most recent
    
    return render(request, 'docket/docket_detail.html', {
        'docket': docket,
        'parties': parties,
        'entries': entries,
    })

@login_required
def docket_entries(request, docket_id):
    """Show all entries for a docket with pagination"""
    docket = get_object_or_404(Docket, id=docket_id)
    entries = docket.entries.all()
    
    return render(request, 'docket/docket_entries.html', {
        'docket': docket,
        'entries': entries,
    })

@login_required
def case_docket(request, case_uuid):
    """Show docket for a specific case"""
    case = get_object_or_404(Case, uuid=case_uuid)
    try:
        docket = case.docket
        return redirect('docket:docket_detail', docket_id=docket.id)
    except Docket.DoesNotExist:
        return render(request, 'docket/case_no_docket.html', {
            'case': case,
        })

@login_required
@permission_required('docket.add_docket', raise_exception=True)
def create_case_docket(request, case_uuid):
    """Create a new docket for a case"""
    # Implementation will follow in next phase
    pass

@login_required
@permission_required('docket.add_docketentry', raise_exception=True)
def add_docket_entry(request, docket_id):
    """Add a new entry to a docket"""
    # Implementation will follow in next phase
    pass

@login_required
@permission_required('docket.add_party', raise_exception=True)
def add_party(request, docket_id):
    """Add a new party to a docket"""
    # Implementation will follow in next phase
    pass

@login_required
@permission_required('docket.add_attorney', raise_exception=True)
def add_attorney(request, party_id):
    """Add a new attorney to a party"""
    # Implementation will follow in next phase
    pass
5. Templates
Create the following template files:

templates/docket/court_list.html
templates/docket/court_detail.html
templates/docket/docket_list.html
templates/docket/docket_detail.html
templates/docket/docket_entries.html
templates/docket/case_no_docket.html

The templates will follow the project's UI standards using Django Templates with HTMX for interactive components and DaisyUI for styling.
6. Update settings.py
Add the docket app to INSTALLED_APPS in daedlaus/settings/base.py:
pythonCopyINSTALLED_APPS = [
    # ...existing apps...
    "docket.apps.DocketConfig",
]
7. Update Main URLs Configuration
Update daedlaus/urls.py to include docket URLs:
pythonCopyurlpatterns = [
    # ...existing URL patterns...
    path('docket/', include('docket.urls')),
]
8. Add Link to Case Detail Template
Update the case detail template (templates/cases/case_detail.html) to include a link to the docket if available:
htmlCopy{% if case.docket %}
<a href="{% url 'docket:docket_detail' case.docket.id %}" class="btn btn-outline">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
    </svg>
    View Docket
</a>
{% else %}
<a href="{% url 'docket:create_case_docket' case.uuid %}" class="btn btn-outline">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
    </svg>
    Create Docket
</a>
{% endif %}
Data Flow and Integration Points

Case-Docket Relationship:

A one-to-one relationship between Case and Docket
Case serves as the internal representation
Docket tracks court-specific information


Court Structure:

Courts are categorized by level (federal, state, local)
Each court can have multiple dockets
Courts store location and electronic filing information


Party-Client Relationship:

Parties in a docket can be optionally linked to internal Client records
This allows for tracking external parties that aren't clients


Attorney-User Relationship:

Attorneys in a docket can be optionally linked to internal User records
This allows for tracking external attorneys as well as internal users


Document Integration:

Docket entries can link to the Document model
Enables storing and viewing actual court documents



Technical Considerations

Federal vs. Local Courts:

Model includes fields specific to federal courts but makes them optional
Court model has a 'level' field to distinguish between court types


PACER Integration:

Fields like pacer_doc_id and pacer_seq_no support potential PACER integration
Court model includes pacer_code field for system identification


Performance:

Dockets can have many entries and parties
Admin interfaces use show_change_link and inlines carefully
Views implement appropriate pagination



Security Considerations

Permission Controls:

Create/edit functions are protected with permission decorators
Views check for appropriate permissions before displaying data


Audit Trail:

All models track creation and updates with timestamps and user references
Changes are logged for compliance purposes



Future Extensions

PACER Integration:

API connections to PACER for automatic docket updates
Document downloads and processing


Electronic Filing:

Direct e-filing capabilities for supported courts
Status tracking for filed documents


Timeline Visualization:

Interactive timeline views for docket entries
Critical path highlighting for key dates



Testing Strategy

Model Tests:

Test docket creation and validation
Test relationships between dockets, parties, and entries
Test integration with Case model


View Tests:

Test docket listing and filtering
Test docket detail view
Test permission enforcement



Verification Steps
After implementation, verify the component by:

Creating test courts
Creating test dockets
Adding parties and attorneys to dockets
Adding docket entries
Linking dockets to cases
Verifying all views display correctly